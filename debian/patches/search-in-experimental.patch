--- a/npm2deb/helper.py
+++ b/npm2deb/helper.py
@@ -8,6 +8,7 @@
 from npm2deb import Npm2Deb as _Npm2Deb
 from npm2deb.utils import debug as _debug
 from npm2deb.mapper import Mapper as _Mapper
+from npm2deb.utils import get_package_in_new as _get_package_in_new
 
 
 DO_PRINT = False
@@ -26,6 +27,7 @@
     found = False
     result = {}
     my_print("Looking for existing repositories:")
+    
     for repo in repositories:
         _debug(1, "search for %s in %s" % (module, repo))
         url_base = "http://anonscm.debian.org/gitweb"
@@ -85,21 +87,13 @@
     _debug(1, "calling new-check")
     found = False
     formatted = "  {0:20} {1:>3}"
-    url = "https://api.ftp-master.debian.org/sources_in_suite/new"
-    _debug(1, "opening url %s" % url)
-    data = _urlopen(url).read().decode('utf-8')
-    data = _parseJSON(data)
-    result = []
-    for package in data:
-        name = package['source']
-        version = package['version']
-        if not module in name:
-            continue
+    result = _get_package_in_new(module)
+    if result:
         found = True
-        result.append(package)
-        my_print(formatted.format(package['source'],
-                                  package['version']
-                                 ))
+        my_print(formatted.format(result[0]['source'],
+                                  result[0]['version']
+                              ))
+        
     if not found:
         my_print("  None")
     return result
@@ -199,3 +193,5 @@
 def print_formatted_dependency(npm, debian, prefix=u''):
     formatted = u"{0:50}{1}"
     my_print(formatted.format(u"%s%s" % (prefix, npm), debian))
+
+
--- a/npm2deb/mapper.py
+++ b/npm2deb/mapper.py
@@ -5,7 +5,7 @@
 
 from npm2deb.utils import debug as _debug
 from npm2deb.utils import debianize_name as _debianize_name
-
+from npm2deb.utils import get_package_in_new as _get_package_in_new
 
 DB_URL = 'https://wiki.debian.org/Javascript/Nodejs/Database'
 
@@ -61,8 +61,15 @@
             'rmadison -s sid "%s" | grep source' % result['name'])
 
         if madison[0] != 0:
-            result['name'] = None
-            return result
+            # checking if package is listed in NEW
+            in_new = _get_package_in_new(node_module)
+            if not in_new:
+                # Looking for package in debian experimental
+                madison = _getstatusoutput(["rmadison -u debian "\
+                                        + result['name']])
+                if madison[0] != 0:
+                    result['name'] = None
+                    return result
 
         tmp = madison[1].split('|')
         if len(tmp) >= 2:
--- a/npm2deb/utils.py
+++ b/npm2deb/utils.py
@@ -1,4 +1,6 @@
 from subprocess import getstatusoutput as _getstatusoutput
+from urllib.request import urlopen as _urlopen
+from json import loads as _parseJSON
 import codecs as _codecs
 import os as _os
 
@@ -110,3 +112,23 @@
 
 def debianize_name(name):
     return name.replace('_', '-').lower()
+
+def get_npmjs_homepage(name):
+    return 'https://npmjs.com/package/' + name
+
+def get_package_in_new(module):
+    """
+    Check if package is available in NEW
+    """
+    content = []
+    url = "https://api.ftp-master.debian.org/sources_in_suite/new"
+    debug(1, "opening url %s" % url)
+    data = _urlopen(url).read().decode('utf-8')
+    data = _parseJSON(data)
+    for package in data:
+        name = package['source']
+        version = package['version']
+        if not module in name:
+            continue
+        content.append(package)
+    return content
